import numpy as np
import random
import math
!pip install path.py;
from path import Path

!wget http://3dvision.princeton.edu/projects/2014/3DShapeNets/ModelNet10.zip
!unzip -q ModelNet10.zip

path = Path("ModelNet10")

//off 파일은 위에서부터  n_verts개의 줄이 있고, 그 아래 n_faces개의 줄이 있음 
// verts 는 x,y,z 좌표로 구성. face는 f를 구성하는 v의 갯수, f를 구성하는 v의 순서-1들로 구성
// ex) verts: -1 1 2 : 정점 좌표가  -1,1,2
// face : 3 0 1 2: 3개의 정점으로 구성, 1,2,3번째 정점으로 구성
def read_off(file):
    if 'OFF' != file.readline().strip(): //첫 줄을 읽어 'OFF'로 시작하는지 확인 -> .off file 유효성 확인 
        raise('Not a valid OFF header') 
    n_verts, n_faces, __ = tuple([int(s) for s in file.readline().strip().split(' ')]) //verts: 정점 수, faces: 면의 수, ㅡㅡ: 무시할 열의 수
    verts = [[float(s) for s in file.readline().strip().split(' ')] for i_vert in range(n_verts)] // 각 정점의 좌표를 리스트에 저장 이를 n_verts 줄만큼 반복. 즉 verts는 각 정점을 담은 list의 list가 됨
    faces = [[int(s) for s in file.readline().strip().split(' ')][1:] for i_face in range(n_faces)] // 삼각형 면을 구성하는 정점의 인덱스를 담은 리스트의 리스트
    return verts, faces
    
with open(path/"bed/train/bed_0001.off", 'r') as f: //.off함수를 읽어오고, read_off함수 실행 -> 정점과 면 정보를 mesh 변수에 저장
    mesh = read_off(f)

//verts, faces로 이루어진 mesh에서 각 면의 면적 계산
verts, faces = mesh //정점과 면들을 mesh에서 추출
areas = np.zeros((len(faces))) //면의 개수와 동일한 길이를 가진 0으로 채워진 배열 생성 -> 각 면의 면적 저장을 위한 변수
verts = np.array(verts) //verts 리스트를 Numpy 배열로 변환(계산을 효율적으로 하기 위해)

# function to calculate triangle area by its vertices
# https://en.wikipedia.org/wiki/Heron%27s_formula
def triangle_area(pt1, pt2, pt3): //세 개의 정점을 인수로 받아 삼각형의 면적 계산하는 함수
    side_a = np.linalg.norm(pt1 - pt2)
    side_b = np.linalg.norm(pt2 - pt3)
    side_c = np.linalg.norm(pt3 - pt1)
    s = 0.5 * ( side_a + side_b + side_c)
    return max(s * (s - side_a) * (s - side_b) * (s - side_c), 0)**0.5

# we calculate areas of all faces in our mesh
for i in range(len(areas)): //면의 면적 저장, 인수로 각 면의 x,y,z좌표 불러오기 
    areas[i] = (triangle_area(verts[faces[i][0]],
                              verts[faces[i][1]],
                              verts[faces[i][2]]))

k = 3000
# we sample 'k' faces with probabilities proportional to their areas
# weights are used to create a distribution.
# they don't have to sum up to one.
sampled_faces = (random.choices(faces,  //면적에 비례하여 가중치를 사용하여 k개 면 샘플링
                                weights=areas,
                                k=k))

# function to sample points on a triangle surface
def sample_point(pt1, pt2, pt3): //삼각형의 내부에서 무작위로 점을 샘플링 
    # barycentric coordinates on a triangle
    # https://mathworld.wolfram.com/BarycentricCoordinates.html
    s, t = sorted([random.random(), random.random()])
    f = lambda i: s * pt1[i] + (t-s) * pt2[i] + (1-t) * pt3[i]
    return (f(0), f(1), f(2))
 
pointcloud = np.zeros((k, 3)) //크기가 k,3인 2차원 배열 생 

# sample points on chosen faces for the point cloud of size 'k'
for i in range(len(sampled_faces)): //샘플링된 면들을 반복하여 각 면에서 점을 샘플링합니다. 
    pointcloud[i] = (sample_point(verts[sampled_faces[i][0]],
                                  verts[sampled_faces[i][1]],
                                  verts[sampled_faces[i][2]]))


// 포인트 클라우드 정규화, Z축 기준으로 무작위로 회정, 가우시안 노이즈 추가 
# normalize
norm_pointcloud = pointcloud - np.mean(pointcloud, axis=0) //정에서 평균값을 빼서 정규화함. 포인트 클라우드를 원점으로 이동
norm_pointcloud /= np.max(np.linalg.norm(norm_pointcloud, axis=1)) //정규화된 포인트클라우드 점들을 단위구로 정규화. 포인트 클라우드의 크기를 일정한 범위로 조절

# rotation around z-axis
theta = random.random() * 2. * math.pi # rotation angle
rot_matrix = np.array([[ math.cos(theta), -math.sin(theta),    0], //theta를 이용하여 Z축을 기준으로 회전하는 3x3회전행렬 생성
                       [ math.sin(theta),  math.cos(theta),    0],
                       [0,                             0,      1]])

rot_pointcloud = rot_matrix.dot(pointcloud.T).T

# add some noise
noise = np.random.normal(0, 0.02, (pointcloud.shape))
noisy_pointcloud = rot_pointcloud + noise


//T-Net class 정의하는 PyTorch 모듈
//T-Net은 입력 포인트 클라우드에 대해 3x3 변환행렬을 예측하는 네트워크 구현
//이미 전처리 단계에서 포인트 클라우드를 원점으로 이동시켰음
//훈련을 시작할 때 변환 없이 학습을 진행하기 위해 기본적으로 이를 단위 행렬로 만들고자 함. 출력에 단위행렬을 더하기만 하면 됨

import torch
import torch.nn as nn
import torch.nn.functional as F

class Tnet(nn.Module):
   def __init__(self, k=3):
      super().__init__()
      self.k=k //convolution layer를 사용하여 입력 포인트 클라우드의 특성 변환 
      self.conv1 = nn.Conv1d(k,64,1)
      self.conv2 = nn.Conv1d(64,128,1)
      self.conv3 = nn.Conv1d(128,1024,1)
      self.fc1 = nn.Linear(1024,512)
      self.fc2 = nn.Linear(512,256)
      self.fc3 = nn.Linear(256,k*k)

      self.bn1 = nn.BatchNorm1d(64) //배치 정규화 레이어를 사용하여 정규화 
      self.bn2 = nn.BatchNorm1d(128)
      self.bn3 = nn.BatchNorm1d(1024)
      self.bn4 = nn.BatchNorm1d(512)
      self.bn5 = nn.BatchNorm1d(256)
       

   def forward(self, input):
      # input.shape == (bs,n,3)
      bs = input.size(0)
      xb = F.relu(self.bn1(self.conv1(input))) //활성화 함수로 ReLu 사용 
      xb = F.relu(self.bn2(self.conv2(xb)))
      xb = F.relu(self.bn3(self.conv3(xb)))
      pool = nn.MaxPool1d(xb.size(-1))(xb)
      flat = nn.Flatten(1)(pool)
      xb = F.relu(self.bn4(self.fc1(flat)))
      xb = F.relu(self.bn5(self.fc2(xb)))
      
      # initialize as identity // 초기 변환행렬
      init = torch.eye(self.k, requires_grad=True).repeat(bs,1,1)
      if xb.is_cuda:
        init=init.cuda()
      # add identity to the output //출력 + 항등행렬
      matrix = self.fc3(xb).view(-1,self.k,self.k) + init
      return matrix


//추출된 포인트 특징을 MLP에 적용한 후, 동일한 64차원 T-Net을 사용하여 특징 정렬.
//순열 불변성을 위해 추출된 변횐된 특징에 대해 대칭함수(Max pooling)적용

class Transform(nn.Module):
   def __init__(self):
        super().__init__()
        self.input_transform = Tnet(k=3) //초기화. 3x3 변환행렬 예측에 사용
        self.feature_transform = Tnet(k=64)//64x64 변환행렬 예측에 사용 
        self.conv1 = nn.Conv1d(3,64,1)//1차원 conv layer로 입력 포인트 클라우드 특성 변환

        self.conv2 = nn.Conv1d(64,128,1)
        self.conv3 = nn.Conv1d(128,1024,1)

        self.bn1 = nn.BatchNorm1d(64) //정규화
        self.bn2 = nn.BatchNorm1d(128)
        self.bn3 = nn.BatchNorm1d(1024)
       
   def forward(self, input): //네트워크의 순방향 전달 정의. 3x3변환, conv+ batch정규화를 거쳐 처리. 이후 feature_transform을 통해 64x64 변환
        matrix3x3 = self.input_transform(input) //3x3, 64x64 변환행렬은 변환 불변성과 순열 불변성을 제공하는 데 사용
        # batch matrix multiplication
        xb = torch.bmm(torch.transpose(input,1,2), matrix3x3).transpose(1,2)
        xb = F.relu(self.bn1(self.conv1(xb)))

        matrix64x64 = self.feature_transform(xb)
        xb = torch.bmm(torch.transpose(xb,1,2), matrix64x64).transpose(1,2)

        xb = F.relu(self.bn2(self.conv2(xb)))
        xb = self.bn3(self.conv3(xb))
        xb = nn.MaxPool1d(xb.size(-1))(xb)
        output = nn.Flatten(1)(xb)
        return output, matrix3x3, matrix64x64
